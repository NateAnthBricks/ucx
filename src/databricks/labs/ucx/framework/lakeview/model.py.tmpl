# Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import Enum
from typing import Dict, List, Any, Iterator, Type, Callable, Optional, BinaryIO
import time
import random
import logging
from databricks.sdk.service._internal import _enum, _from_dict, _repeated_dict, _repeated_enum

{{range .Packages}}

{{range .Types}}
{{if .Fields -}}{{if not .IsRequest}}@dataclass
class {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}:{{if .Description}}
    """{{.Comment "    " 100}}"""
    {{end}}{{- range .RequiredFields | alphanumOnly | noConst}}
    {{template "safe-snake-name" .}}: {{template "type" .Entity}}{{if .Description}}
    """{{.Comment "    " 100 | trimSuffix "\""}}"""{{end}}
    {{- end}}
    {{- range .NonRequiredFields | alphanumOnly | noConst}}
    {{template "safe-snake-name" .}}: {{template "type" .Entity}} | None = None{{if .Description}}
    """{{.Comment "    " 100 | trimSuffix "\""}}"""{{end}}
    {{- end}}
    {{if .HasJsonField -}}{{if not .ChildTypes}}
    def as_dict(self) -> dict[str, Any]:
        body: dict[str, Any] = { {{range .Fields | constOnly}}'{{.Name}}': {{template "const" .Entity}},{{end}} }
        {{range .Fields | alphanumOnly | noConst}}if self.{{template "safe-snake-name" .}}{{with .Entity.IsPrimitive}} is not None{{end}}: body['{{.Name}}'] = {{template "as_request_type" .}}
        {{end -}}
        return body
    {{end}}
    @classmethod
    def from_dict(cls, d: Dict[str, Any]) -> {{template "type" . }}:
        {{if .ChildTypes -}}
        {{range $i, $_ := .ChildTypes}}{{if $i}}el{{end}}if {{range $j, $_ := .TypeLookup}}{{if $j}} and {{end}}'{{.Name}}' == {{template "const" .Entity}}{{end}}:
            return {{template "type" .Entity}}.from_dict(d)
        {{end}}else: raise KeyError(...)
        {{- else -}}
        return cls({{range $i, $f := .Fields | alphanumOnly | noConst}}{{if $i}}, {{end}}{{template "safe-snake-name" $f}}={{template "from_dict_type" $f}}{{end}})
        {{- end}}
    {{end}}
{{end}}
{{else if .ArrayValue}}type {{.PascalName}} []{{template "type" .ArrayValue}}
{{else if .MapValue}}{{.PascalName}} = {{template "type-nq" .}}
{{else if .Enum}}class {{.PascalName}}(Enum):
    {{if .Description}}"""{{.Comment "    " 100 | trimSuffix "\"" }}"""{{end}}
    {{range .Enum }}
    {{.ConstantName}} = '{{.Content}}'{{end}}{{end}}
{{end}}

{{end}}

{{- define "from_dict_type" -}}
	{{- if not .Entity }}None
	{{- else if .Entity.ArrayValue }}
		{{- if (or .Entity.ArrayValue.IsObject .Entity.ArrayValue.IsExternal) }}_repeated_dict(d, '{{.Name}}', {{template "type-nq" .Entity.ArrayValue}})
		{{- else if .Entity.ArrayValue.Enum }}_repeated_enum(d, '{{.Name}}', {{template "type-nq" .Entity.ArrayValue}})
		{{- else}}d.get('{{.Name}}', None){{- end -}}
	{{- else if (or .Entity.IsObject .Entity.IsExternal) }}_from_dict(d, '{{.Name}}', {{template "type-nq" .Entity}})
	{{- else if .Entity.Enum }}_enum(d, '{{.Name}}', {{template "type-nq" .Entity}})
	{{- else}}d.get('{{.Name}}', None){{- end -}}
{{- end -}}
{{- define "as_request_type" -}}
	{{- if not .Entity }}None # ERROR: No Type
	{{- /* This should be done recursively, but recursion in text templates is not supported. */ -}}
	{{- else if .Entity.ArrayValue }}[{{if or .Entity.ArrayValue.IsObject .Entity.ArrayValue.IsExternal}}v.as_dict(){{ else if .Entity.ArrayValue.Enum }}v.value{{else}}v{{end}} for v in self.{{template "safe-snake-name" .}}]
	{{- else if or .Entity.IsObject .Entity.IsExternal }}self.{{template "safe-snake-name" .}}.as_dict()
	{{- else if .Entity.Enum }}self.{{template "safe-snake-name" .}}.value
	{{- else}}self.{{template "safe-snake-name" .}}{{- end -}}
{{- end -}}
{{- define "type" -}}
	{{- if not . }}any # ERROR: No Type
	{{- else if .ArrayValue }}List[{{template "type-nq" .ArrayValue}}]
	{{- else if .MapValue }}Dict[str,{{template "type-nq" .MapValue}}]
	{{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
	{{- else if .ChildTypes }}{{range $i, $_ := .ChildTypes}}{{if $i}} | {{end}}{{template "type" .Entity}}{{end}}
	{{- else if .IsObject }}{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}{{template "type-nq" .}}{{- end -}}
{{- end -}}
{{- define "type-nq" -}}
	{{- if .IsString}}str
	{{- else if .IsEmpty}}Any
	{{- else if .IsAny}}Any
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .IsByteStream}}BinaryIO
	{{- else if .ArrayValue }}List[{{template "type-nq" .ArrayValue}}]
	{{- else if .MapValue }}Dict[str,{{template "type-nq" .MapValue}}]
	{{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
	{{- else if .IsObject }}{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{- define "type-doc" -}}
	{{- if .IsString}}str
	{{- else if .IsEmpty}}Any
	{{- else if .IsAny}}Any
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .IsByteStream}}BinaryIO
	{{- else if .ArrayValue }}List[{{template "type-doc" .ArrayValue}}]
	{{- else if .MapValue }}Dict[str,{{template "type-doc" .MapValue}}]
	{{- else if .IsExternal }}:class:`{{.PascalName}}`
	{{- else if .IsObject }}:class:`{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}`
	{{- else if .Enum }}:class:`{{.PascalName}}`
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{- define "const" -}}
	{{- if .IsString}}'{{.Const}}'
	{{- else if .IsInt}}{{.Const}}
	{{- else}}None/* MISSING CONST */
	{{- end -}}
{{- end -}}

{{ define "safe-name" -}}
  {{/* https://docs.python.org/3/reference/lexical_analysis.html#keywords */}}
  {{- $keywords := list	"False" "await" "else" "import" "pass" "None" "break" "except" "in" "raise"
                       	"True" "class" "finally" "is" "return" "and" "continue" "for" "lambda" "try"
                       	"as" "def" "from" "nonlocal" "while" "assert" "del" "global" "not" "with"
                       	"async" "elif" "if" "or" "yield" -}}
  {{.}}{{ if in $keywords . }}_{{ end }}
{{- end}}

{{ define "safe-snake-name" -}}
  {{ template "safe-name" .SnakeName }}
{{- end}}
